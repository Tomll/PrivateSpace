diff --git a/src/com/transage/featureoption/FeatureOption.java b/src/com/transage/featureoption/FeatureOption.java
new file mode 100755
index 0000000..830fce9
--- /dev/null
+++ b/src/com/transage/featureoption/FeatureOption.java
@@ -0,0 +1,7 @@
+/* generated by mediatek */
+
+package com.transage.featureoption;
+
+public final class FeatureOption
+{
+}
diff --git a/src/com/transage/privatespace/activity/AddApp.java b/src/com/transage/privatespace/activity/AddApp.java
index a5e15c1..5c4349c 100755
--- a/src/com/transage/privatespace/activity/AddApp.java
+++ b/src/com/transage/privatespace/activity/AddApp.java
@@ -2,13 +2,10 @@ package com.transage.privatespace.activity;
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
-import android.content.ContentValues;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.view.View;
@@ -22,7 +19,7 @@ import com.transage.privatespace.R;
 import com.transage.privatespace.adapter.AddAppListViewAdapter;
 import com.transage.privatespace.adapter.AddAppListViewAdapter.ViewHolder1;
 import com.transage.privatespace.bean.AppInfo;
-import com.transage.privatespace.utils.DBHelper;
+import com.transage.privatespace.database.DatabaseAdapter;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -43,7 +40,7 @@ public class AddApp extends Activity implements View.OnClickListener, AdapterVie
     private HashMap<Integer, AppInfo> map_selectedApp = new HashMap<Integer, AppInfo>();
     // 将上面的map_selectedApp中的值遍历，存入该list_selectedApp集合
     private ArrayList<AppInfo> list_selectedApp = new ArrayList<AppInfo>();
-    private SQLiteDatabase db;
+    private DatabaseAdapter mDb;
 
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
@@ -54,9 +51,7 @@ public class AddApp extends Activity implements View.OnClickListener, AdapterVie
         setContentView(R.layout.activity_add_app);
 
         // 通过自定义DBHelper类，获取SQLiteDatabase对象
-        DBHelper dbHelper = new DBHelper(this);
-        db = dbHelper.getWritableDatabase();
-
+        mDb = new DatabaseAdapter(this.getApplication());
         initData();
         initViewAndAdapter();
     }
@@ -105,11 +100,8 @@ public class AddApp extends Activity implements View.OnClickListener, AdapterVie
             list_selectedApp.add(entry.getValue());
         }
         // 将选中的app添加到本地的数据库apps表中
-        for (int i = 0; i < list_selectedApp.size(); i++) {
-            ContentValues cv = new ContentValues();// 实例化一个ContentValues用来装载待插入的数据
-            cv.put("packageName", list_selectedApp.get(i).getPackageName());// 添加包名
-            cv.put("appName", list_selectedApp.get(i).getAppName());// 添加应用名
-            db.insert("apps", null, cv);// 执行插入操作
+        for (AppInfo appInfo : list_selectedApp) {
+            mDb.addApp(appInfo);
         }
         finish();
     }
@@ -134,11 +126,9 @@ public class AddApp extends Activity implements View.OnClickListener, AdapterVie
             appInfo.setAppName(ai.loadLabel(packageManager).toString());
             appInfo.setPackageName(ai.packageName);
             // 过滤掉应用本身 和 数据库中已经添加过的应用
-            Cursor cursor = db.rawQuery("select * from apps where packageName=?", new String[]{ai.packageName});
-            if (!thisPackageName.equals(ai.packageName) && !cursor.moveToFirst()) {
+            if (!thisPackageName.equals(ai.packageName) && !mDb.isExistsApp(ai)) {
                 appInfoList.add(appInfo);
             }
-            cursor.close();
         }
     }
 
diff --git a/src/com/transage/privatespace/activity/AddPeople.java b/src/com/transage/privatespace/activity/AddPeople.java
index ee75b49..088931b 100755
--- a/src/com/transage/privatespace/activity/AddPeople.java
+++ b/src/com/transage/privatespace/activity/AddPeople.java
@@ -3,8 +3,6 @@ package com.transage.privatespace.activity;
 import android.Manifest;
 import android.annotation.TargetApi;
 import android.app.Activity;
-import android.content.ContentResolver;
-import android.content.ContentValues;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.os.Build;
@@ -24,6 +22,7 @@ import com.transage.privatespace.R;
 import com.transage.privatespace.adapter.AddPeopleListViewAdapter;
 import com.transage.privatespace.adapter.AddPeopleListViewAdapter.ViewHolder1;
 import com.transage.privatespace.bean.People;
+import com.transage.privatespace.utils.PrivateSpaceUtils;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -73,7 +72,8 @@ public class AddPeople extends Activity implements AdapterView.OnItemClickListen
                 list_selectedPeople.add(next.getValue());
             }
             //将peopleList中的联系人加为私密
-            setPrivateContacts(list_selectedPeople, 1, getContentResolver());
+            PrivateSpaceUtils.setPrivateContacts(list_selectedPeople, 1, this);
+//            setPrivateContacts(list_selectedPeople, 1, getContentResolver());
             finish();
         }
     }
@@ -191,7 +191,8 @@ public class AddPeople extends Activity implements AdapterView.OnItemClickListen
             list_selectedPeople.add(next.getValue());
         }
         //将peopleList中的联系人加为私密
-        setPrivateContacts(list_selectedPeople, 1, getContentResolver());
+//        setPrivateContacts(list_selectedPeople, 1, getContentResolver());
+        PrivateSpaceUtils.setPrivateContacts(list_selectedPeople, 1, this);
         finish();
     }
 
@@ -202,15 +203,13 @@ public class AddPeople extends Activity implements AdapterView.OnItemClickListen
      * @param privateFlag ：1表示加为私密 ，0表示解除私密
      * @param cr          ：内容解析者
      */
-    public static void setPrivateContacts(ArrayList<People> list, int privateFlag, ContentResolver cr) {
-        ContentValues values = new ContentValues();
-        values.put(ContactsContract.Contacts.IS_PRIVATE_CONTACTS, privateFlag);
-        String[] selectionArgs = new String[1];
-        for (int i = 0; i < list.size(); i++) {
-            selectionArgs[0] = String.valueOf(list.get(i).getRawContactId());
-            cr.update(ContactsContract.Contacts.CONTENT_URI, values, ContactsContract.Contacts.NAME_RAW_CONTACT_ID + "= ?", selectionArgs);
-        }
-    }
-
-
+//    public static void setPrivateContacts(ArrayList<People> list, int privateFlag, ContentResolver cr) {
+//        ContentValues values = new ContentValues();
+//        values.put(ContactsContract.Contacts.IS_PRIVATE_CONTACTS, privateFlag);
+//        String[] selectionArgs = new String[1];
+//        for (int i = 0; i < list.size(); i++) {
+//            selectionArgs[0] = String.valueOf(list.get(i).getRawContactId());
+//            cr.update(ContactsContract.Contacts.CONTENT_URI, values, ContactsContract.Contacts.NAME_RAW_CONTACT_ID + "= ?", selectionArgs);
+//        }
+//    }
 }
diff --git a/src/com/transage/privatespace/activity/Main.java b/src/com/transage/privatespace/activity/Main.java
index 89945d2..a8e6af7 100755
--- a/src/com/transage/privatespace/activity/Main.java
+++ b/src/com/transage/privatespace/activity/Main.java
@@ -4,8 +4,6 @@ import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.graphics.Rect;
 import android.os.Build;
 import android.os.Bundle;
@@ -15,11 +13,10 @@ import android.support.v7.widget.RecyclerView;
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
-
 import com.transage.privatespace.R;
 import com.transage.privatespace.adapter.AppRecyclerAdapter;
 import com.transage.privatespace.bean.AppInfo;
-import com.transage.privatespace.utils.DBHelper;
+import com.transage.privatespace.database.DatabaseAdapter;
 
 import java.util.ArrayList;
 
@@ -33,7 +30,7 @@ public class Main extends Activity implements View.OnClickListener, AppRecyclerA
     private AppRecyclerAdapter recycleAdapter;// 适配器
     private PackageManager packageManager;
     private boolean isShowDeleteImageView = false;
-    private SQLiteDatabase db;
+    private DatabaseAdapter mDb;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -43,8 +40,7 @@ public class Main extends Activity implements View.OnClickListener, AppRecyclerA
         getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);//透明状态栏
         setContentView(R.layout.activity_main);
 
-        DBHelper dbHelper = new DBHelper(this);
-        db = dbHelper.getWritableDatabase();
+        mDb = new DatabaseAdapter(getApplication());
 
         // initData(); //一定要先初始化数据
         initViewAndAdapter(); // 再初始化View 和 Adapter，否则等着空指针吧！！！
@@ -87,27 +83,7 @@ public class Main extends Activity implements View.OnClickListener, AppRecyclerA
     private void initData() {
         packageManager = getPackageManager();
         appList.clear();
-        Cursor cursor = db.query("apps", null, null, null, null, null, null, null);
-        if (cursor != null && cursor.moveToFirst()) {// 判断游标是否为空
-            do {
-                String packageName = cursor.getString(cursor.getColumnIndex("packageName"));
-                String appName = cursor.getString(cursor.getColumnIndex("appName"));
-                AppInfo appInfo = new AppInfo();
-                try {
-                    // 根据packageName获取对应的appIcon
-                    appInfo.setAppIcon(packageManager.getApplicationIcon(packageName));
-                } catch (PackageManager.NameNotFoundException e) {// 若没发现对应的包名(可能已卸载)：将该包名从数据库中删除
-                    String whereClause = "packageName=?";// 删除的条件
-                    String[] whereArgs = {packageName};// 删除的条件参数
-                    db.delete("apps", whereClause, whereArgs);// 执行删除
-                    continue;// 结束本次循环
-                }
-                appInfo.setPackageName(packageName);
-                appInfo.setAppName(appName);
-                appList.add(appInfo);
-            } while (cursor.moveToNext());
-            cursor.close();
-        }
+        appList.addAll(mDb.getApps(packageManager));
         // 最后的"+"
         AppInfo appInfo = new AppInfo();
         appInfo.setAppIcon(getDrawable(R.mipmap.add));
@@ -128,10 +104,7 @@ public class Main extends Activity implements View.OnClickListener, AppRecyclerA
             launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
             startActivity(launchIntent);
         } else if (view.getId() == R.id.iv_delete) {
-            // 数据库中删除该包名
-            String whereClause = "packageName=?";// 删除的条件
-            String[] whereArgs = {appList.get(position).getPackageName()};// 删除的条件参数
-            db.delete("apps", whereClause, whereArgs);// 执行删除
+            mDb.deleteAppByPackageName(appList.get(position).getPackageName());
             // 从本次加载的数据中删除该包名，刷新适配器
             appList.remove(position);
             recycleAdapter.notifyDataSetChanged();
diff --git a/src/com/transage/privatespace/bean/AppInfo.java b/src/com/transage/privatespace/bean/AppInfo.java
index 06e281b..74d7867 100755
--- a/src/com/transage/privatespace/bean/AppInfo.java
+++ b/src/com/transage/privatespace/bean/AppInfo.java
@@ -7,10 +7,19 @@ import android.graphics.drawable.Drawable;
  * APP信息实体类
  */
 public class AppInfo {
+    private int id;
     private String appName; //应用名
     private String packageName;//包名
     private Drawable appIcon;//图标
 
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
     public String getAppName() {
         return appName;
     }
diff --git a/src/com/transage/privatespace/bean/People.java b/src/com/transage/privatespace/bean/People.java
index 0e1aa88..721022e 100755
--- a/src/com/transage/privatespace/bean/People.java
+++ b/src/com/transage/privatespace/bean/People.java
@@ -5,10 +5,19 @@ package com.transage.privatespace.bean;
  * 联系人实体类
  */
 public class People {
+    private int id;
     private String name;
     private String phoneNum;
     private int rawContactId;
 
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
     public String getName() {
         return name;
     }
diff --git a/src/com/transage/privatespace/database/DatabaseAdapter.java b/src/com/transage/privatespace/database/DatabaseAdapter.java
new file mode 100755
index 0000000..8c83d20
--- /dev/null
+++ b/src/com/transage/privatespace/database/DatabaseAdapter.java
@@ -0,0 +1,146 @@
+package com.transage.privatespace.database;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.database.Cursor;
+
+import com.transage.privatespace.bean.AppInfo;
+import com.transage.privatespace.bean.People;
+import java.util.ArrayList;
+import java.util.List;
+import android.util.Log;
+
+/**
+ * Created by yanjie.xu on 2017/7/5.
+ * 本地数据库操作帮助类
+ */
+
+public class DatabaseAdapter {
+    private static final String TAG = "DatabaseAdapter";
+
+    private Context mContext;
+    private static PsDatabaseHelper mDbHelper;
+
+    public DatabaseAdapter(Context context) {
+        this.mContext = context;
+        mDbHelper = PsDatabaseHelper.getInstance(context);
+    }
+
+    /** App操作 */
+    public void addApp(AppInfo appInfo){
+        ContentValues values = new ContentValues();
+        values.put(PsDatabaseHelper.AppsColumns.APP_NAME, appInfo.getAppName());
+        values.put(PsDatabaseHelper.AppsColumns.PACKAGE_NAME, appInfo.getPackageName());
+        insert(PsDatabaseHelper.Tables.APPS, null, values);
+    }
+
+    public List<AppInfo> getApps(PackageManager packageManager){
+        String sql = "SELECT " +
+                PsDatabaseHelper.AppsColumns._ID + "," +
+                PsDatabaseHelper.AppsColumns.APP_NAME + "," +
+                PsDatabaseHelper.AppsColumns.PACKAGE_NAME +
+                " FROM " + PsDatabaseHelper.Tables.APPS;
+        Log.i(TAG, "sql = " + sql);
+        List<AppInfo> list = new ArrayList<>();
+        Cursor cursor = query(sql, null);
+        try {
+            while (cursor.moveToNext()){
+                AppInfo appInfo = new AppInfo();
+                appInfo.setId(cursor.getInt(0));
+                appInfo.setAppName(cursor.getString(1));
+                appInfo.setPackageName(cursor.getString(2));
+                try {
+                    // 根据packageName获取对应的appIcon
+                    appInfo.setAppIcon(packageManager.getApplicationIcon(appInfo.getPackageName()));
+                } catch (PackageManager.NameNotFoundException e) {// 若没发现对应的包名(可能已卸载)：将该包名从数据库中删除
+                    String whereClause = PsDatabaseHelper.AppsColumns.PACKAGE_NAME + "=?";// 删除的条件
+                    String[] whereArgs = {appInfo.getPackageName()};// 删除的条件参数
+                    delete(PsDatabaseHelper.Tables.APPS, whereClause, whereArgs);// 执行删除
+                    continue;//继续查询下一条数据
+                }
+                list.add(appInfo);
+            }
+        } catch (Exception e){
+            e.printStackTrace();
+        } finally {
+            cursor.close();
+        }
+        return list;
+    }
+
+    public void deleteAppByPackageName(String packageName) {
+        // 数据库中删除该包名
+        String whereClause = PsDatabaseHelper.AppsColumns.PACKAGE_NAME + "=?";// 删除的条件
+        String[] whereArgs = {packageName};// 删除的条件参数
+        delete(PsDatabaseHelper.Tables.APPS, whereClause, whereArgs);// 执行删除
+    }
+
+    public boolean isExistsApp(ActivityInfo activityInfo){
+        boolean isExitsts;
+        String sql = "select * from " + PsDatabaseHelper.Tables.APPS +
+                " where " + PsDatabaseHelper.AppsColumns.PACKAGE_NAME + "=?";
+        Cursor cursor = query(sql, new String[]{activityInfo.packageName});
+        isExitsts = cursor.moveToFirst();
+        cursor.close();
+        return isExitsts;
+    }
+
+    /** Contact操作 */
+    public void addContact(People people){
+        ContentValues values = new ContentValues();
+        values.put(PsDatabaseHelper.ContactsColumns.RAWCONTACT_ID, people.getRawContactId());
+        values.put(PsDatabaseHelper.ContactsColumns.CONTACT_NAME, people.getName());
+        values.put(PsDatabaseHelper.ContactsColumns.CONTACT_NUMBER, people.getPhoneNum());
+        insert(PsDatabaseHelper.Tables.CONTACTS, null, values);
+    }
+
+    public void deleteContactsById(int id){
+        delete(PsDatabaseHelper.Tables.CONTACTS, PsDatabaseHelper.ContactsColumns._ID + "=?", new String[]{String.valueOf(id)});
+    }
+
+    public List<People> getContacts(){
+        String sql = "SELECT " +
+                PsDatabaseHelper.ContactsColumns._ID + "," +
+                PsDatabaseHelper.ContactsColumns.RAWCONTACT_ID + "," +
+                PsDatabaseHelper.ContactsColumns.CONTACT_NAME + "," +
+                PsDatabaseHelper.ContactsColumns.CONTACT_NUMBER +
+                " FROM " + PsDatabaseHelper.Tables.CONTACTS;
+        Log.i(TAG, "sql = " + sql);
+        List<People> list = new ArrayList<>();
+        Cursor cursor = query(sql, null);
+        try {
+            while (cursor.moveToNext()){
+                People people = new People();
+                people.setId(cursor.getInt(0));
+                people.setRawContactId(cursor.getInt(1));
+                people.setName(cursor.getString(2));
+                people.setPhoneNum(cursor.getString(3));
+                list.add(people);
+            }
+        } catch (Exception e){
+            e.printStackTrace();
+        } finally {
+            cursor.close();
+        }
+        return list;
+    }
+
+    /** 统一封装数据库接口 */
+    private long insert(String table, String nullColumnHack, ContentValues values){
+        return PsDatabaseHelper.getInstance(mContext).getDatabase(true).insert(table, nullColumnHack, values);
+    }
+
+    private Cursor query(String sql, String[] selectionArgs){
+        return PsDatabaseHelper.getInstance(mContext).getDatabase(true).rawQuery(sql, selectionArgs);
+    }
+
+    private int update(String table, ContentValues values, String whereClause, String[] whereArgs){
+        return PsDatabaseHelper.getInstance(mContext).getDatabase(true).update(table, values, whereClause, whereArgs);
+    }
+
+    private int delete(String table, String whereClause, String[] whereArgs){
+        return PsDatabaseHelper.getInstance(mContext).getDatabase(true).delete(table, whereClause, whereArgs);
+    }
+}
diff --git a/src/com/transage/privatespace/database/PsDatabaseHelper.java b/src/com/transage/privatespace/database/PsDatabaseHelper.java
new file mode 100755
index 0000000..8a3d8b2
--- /dev/null
+++ b/src/com/transage/privatespace/database/PsDatabaseHelper.java
@@ -0,0 +1,90 @@
+package com.transage.privatespace.database;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+/**
+ * Created by yanjie.xu on 2017/7/5.
+ * 本地数据库维护类
+ */
+
+public class PsDatabaseHelper extends SQLiteOpenHelper{
+    private static final String TAG = "PsDatabaseHelper";
+    private final static int VERSION = 1;
+    private final static String DB_NAME = "privatespace.db";
+    private Context mContext;
+    private static PsDatabaseHelper sSingleton;
+
+    public interface Tables {
+        public static final String APPS = "apps";
+        public static final String CONTACTS = "contacts";
+    }
+
+    public interface AppsColumns {
+        public static final String _ID = "id";
+        public static final String PACKAGE_NAME = "package_name";
+        public static final String APP_NAME = "app_name";
+    }
+
+    public interface ContactsColumns{
+        public static final String _ID = "id";
+        public static final String RAWCONTACT_ID = "rawcontact_id";
+        public static final String CONTACT_NAME = "contact_name";
+        public static final String CONTACT_NUMBER = "contact_number";
+    }
+
+    public PsDatabaseHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
+        super(context, name, factory, version);
+        this.mContext = context;
+    }
+
+    public static synchronized PsDatabaseHelper getInstance(Context context) {
+        if (sSingleton == null) {
+            sSingleton = new PsDatabaseHelper(context, DB_NAME, null, VERSION);
+            Log.i(TAG, "PsDatabaseHelper new object");
+        }
+        return sSingleton;
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase sqLiteDatabase) {
+        Log.i(TAG, "onCreate");
+        createTable(sqLiteDatabase);
+    }
+
+    /**
+     * 创建数据表
+     * @param sqLiteDatabase
+     */
+    private void createTable(SQLiteDatabase sqLiteDatabase) {
+        //执行创建私密应用表
+        String sqlCreateAppsTable = "CREATE TABLE IF NOT EXISTS " + Tables.APPS + " (" +
+                AppsColumns._ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
+                AppsColumns.APP_NAME + " TEXT, " +
+                AppsColumns.PACKAGE_NAME + " TEXT" +
+                ");";
+        Log.i(TAG, "sql = " + sqlCreateAppsTable);
+        sqLiteDatabase.execSQL(sqlCreateAppsTable);
+
+        //执行创建私密联系人表
+        String sqlCreateContactsTable = "CREATE TABLE IF NOT EXISTS " + Tables.CONTACTS + " (" +
+                ContactsColumns._ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
+                ContactsColumns.RAWCONTACT_ID + " INTEGER, " +
+                ContactsColumns.CONTACT_NAME + " TEXT, " +
+                ContactsColumns.CONTACT_NUMBER + " TEXT" +
+                ");";
+        Log.i(TAG, "sql = " + sqlCreateContactsTable);
+        sqLiteDatabase.execSQL(sqlCreateContactsTable);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
+
+    }
+
+    public SQLiteDatabase getDatabase(boolean writable) {
+        return writable ? getWritableDatabase() : getReadableDatabase();
+    }
+}
\ No newline at end of file
diff --git a/src/com/transage/privatespace/fragment/FG_PrivateCallRecords.java b/src/com/transage/privatespace/fragment/FG_PrivateCallRecords.java
index e27d1a1..f266683 100755
--- a/src/com/transage/privatespace/fragment/FG_PrivateCallRecords.java
+++ b/src/com/transage/privatespace/fragment/FG_PrivateCallRecords.java
@@ -4,7 +4,6 @@ import android.Manifest;
 import android.content.ContentResolver;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.os.Bundle;
 import android.provider.CallLog;
 import android.support.annotation.Nullable;
@@ -21,7 +20,8 @@ import com.transage.privatespace.adapter.CallRecordListViewAdapter;
 import com.transage.privatespace.adapter.PeopleListViewAdapter;
 import com.transage.privatespace.bean.CallRecord;
 import com.transage.privatespace.bean.People;
-import com.transage.privatespace.utils.DBHelper;
+import com.transage.privatespace.database.DatabaseAdapter;
+import com.transage.privatespace.utils.PrivateSpaceUtils;
 
 import java.sql.Date;
 import java.text.SimpleDateFormat;
@@ -32,98 +32,89 @@ import java.util.Locale;
  * Created by dongrp on 2016/9/1.
  */
 public class FG_PrivateCallRecords extends Fragment {
-	private View view;
-	private CallRecordListViewAdapter callRecordListViewAdapter;
-	private ArrayList<ArrayList<CallRecord>> listCallRecordList = new ArrayList<ArrayList<CallRecord>>(); // 该list存放每个私密联系人的通话记录
+    private View view;
+    private CallRecordListViewAdapter callRecordListViewAdapter;
+    private ArrayList<ArrayList<CallRecord>> listCallRecordList = new ArrayList<ArrayList<CallRecord>>(); // 该list存放每个私密联系人的通话记录
 
-	@Nullable
-	@Override
-	public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-		view = inflater.inflate(R.layout.fragment_call_records, null);
-		return view;
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        view = inflater.inflate(R.layout.fragment_call_records, null);
+        return view;
 
-	}
+    }
 
-	@Override
-	public void onResume() {
-		super.onResume();
-		initData();
-		initViewAndAdapter();
-	}
+    @Override
+    public void onResume() {
+        super.onResume();
+        initData();
+        initViewAndAdapter();
+    }
 
-	/**
-	 * 初始化view 和 adapter
-	 */
-	private void initViewAndAdapter() {
-		ListView listView = (ListView) view.findViewById(R.id.listViewCallRecord);
-		callRecordListViewAdapter = new CallRecordListViewAdapter(getActivity(), listCallRecordList);
-		listView.setAdapter(callRecordListViewAdapter);
-		listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-			@Override
-			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-				PeopleListViewAdapter.callPhoneOrSendSms(getActivity(), 1, listCallRecordList.get(position).get(0)
-						.getPhoneNum());
-			}
-		});
-	}
+    /**
+     * 初始化view 和 adapter
+     */
+    private void initViewAndAdapter() {
+        ListView listView = (ListView) view.findViewById(R.id.listViewCallRecord);
+        callRecordListViewAdapter = new CallRecordListViewAdapter(getActivity(), listCallRecordList);
+        listView.setAdapter(callRecordListViewAdapter);
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                PeopleListViewAdapter.callPhoneOrSendSms(getActivity(), 1, listCallRecordList.get(position).get(0)
+                        .getPhoneNum());
+            }
+        });
+    }
 
-	/**
-	 * 初始化数据
-	 */
-	public void initData() {
-		// 1.先获取到所有私密联系人
-		ArrayList<People> listPrivatePeople = new ArrayList<People>();
-		DBHelper dbHelper = new DBHelper(getActivity());
-		SQLiteDatabase db = dbHelper.getWritableDatabase();
-		Cursor cursor = db.query("peoples", null, null, null, null, null, "name asc", null);
-		if (cursor != null && cursor.moveToFirst()) { // 判断游标是否为空
-			do {
-				String name = cursor.getString(cursor.getColumnIndex("name"));
-				String phoneNum = cursor.getString(cursor.getColumnIndex("phoneNum"));
-				People people = new People();
-				people.setName(name);
-				people.setPhoneNum(phoneNum);
-				listPrivatePeople.add(people);
-			} while (cursor.moveToNext());
-			cursor.close();
-		}
-		// 2.根据私密联系人获取通话记录
-		listCallRecordList.clear();
-		// 检查并申请 READ_CALL_LOG 权限
-		if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_CALL_LOG) != PackageManager.PERMISSION_GRANTED) {
-			ActivityCompat.requestPermissions(getActivity(), new String[] { Manifest.permission.READ_CALL_LOG }, 1);
-			return;
-		}
-		ContentResolver resolver = getActivity().getContentResolver();
-		String projection[] = new String[] { CallLog.Calls.DATE, CallLog.Calls.NUMBER, CallLog.Calls.TYPE,
-				CallLog.Calls.DURATION };
-		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM-dd HH:mm", Locale.getDefault());
+    /**
+     * 初始化数据
+     */
+    public void initData() {
+        // 1.先获取到所有私密联系人
+        ArrayList<People> listPrivatePeople = new ArrayList<People>();
+        listPrivatePeople.addAll(new DatabaseAdapter(getContext()).getContacts());
+        // 2.根据私密联系人获取通话记录
+        listCallRecordList.clear();
+        // 检查并申请 READ_CALL_LOG 权限
+        if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_CALL_LOG) != PackageManager.PERMISSION_GRANTED) {
+            ActivityCompat.requestPermissions(getActivity(), new String[] { Manifest.permission.READ_CALL_LOG }, 1);
+            return;
+        }
 
-		for (int i = 0; i < listPrivatePeople.size(); i++) {
-			Cursor recordCursor = resolver.query(CallLog.Calls.CONTENT_URI, projection, "number=?",
-					new String[] { listPrivatePeople.get(i).getPhoneNum() }, CallLog.Calls.DATE);
-			if (recordCursor != null && recordCursor.moveToFirst()) {
-				ArrayList<CallRecord> callRecordsList = new ArrayList<CallRecord>();
-				do {
-					String date = simpleDateFormat.format(new Date(recordCursor.getLong(recordCursor
-							.getColumnIndex(CallLog.Calls.DATE))));
-					String phoneNum = recordCursor.getString(recordCursor.getColumnIndex(CallLog.Calls.NUMBER));
-					int type = recordCursor.getInt(recordCursor.getColumnIndex(CallLog.Calls.TYPE));
-					int duration = recordCursor.getInt(recordCursor.getColumnIndex(CallLog.Calls.DURATION));
-					// 添加数据到list
-					CallRecord callRecord = new CallRecord();
-					callRecord.setDate(date);
-					callRecord.setPhoneNum(phoneNum);
-					callRecord.setName(listPrivatePeople.get(i).getName());
-					callRecord.setType(type);
-					callRecord.setDuration(duration);
-					callRecordsList.add(callRecord);
-				} while (recordCursor.moveToNext());
-				listCallRecordList.add(callRecordsList);
-				recordCursor.close();
-			}
-		}
+        ContentResolver resolver = getActivity().getContentResolver();
+        String projection[] = new String[] { CallLog.Calls.DATE, CallLog.Calls.NUMBER, CallLog.Calls.TYPE,
+                CallLog.Calls.DURATION };
+        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM-dd HH:mm", Locale.getDefault());
 
-	}
+        for (int i = 0; i < listPrivatePeople.size(); i++) {
+            String phone = listPrivatePeople.get(i).getPhoneNum();
+            if (phone != null){
+                Cursor recordCursor = resolver.query(CallLog.Calls.CONTENT_URI, projection, "number=?",
+                        new String[] { listPrivatePeople.get(i).getPhoneNum() }, CallLog.Calls.DATE);
+                if (recordCursor != null && recordCursor.moveToFirst()) {
+                    ArrayList<CallRecord> callRecordsList = new ArrayList<CallRecord>();
+                    do {
+                        String date = simpleDateFormat.format(new Date(recordCursor.getLong(recordCursor
+                                .getColumnIndex(CallLog.Calls.DATE))));
+                        String phoneNum = recordCursor.getString(recordCursor.getColumnIndex(CallLog.Calls.NUMBER));
+                        int type = recordCursor.getInt(recordCursor.getColumnIndex(CallLog.Calls.TYPE));
+                        int duration = recordCursor.getInt(recordCursor.getColumnIndex(CallLog.Calls.DURATION));
+                        // 添加数据到list
+                        CallRecord callRecord = new CallRecord();
+                        callRecord.setDate(date);
+                        callRecord.setPhoneNum(phoneNum);
+                        callRecord.setName(listPrivatePeople.get(i).getName());
+                        callRecord.setType(type);
+                        callRecord.setDuration(duration);
+                        callRecordsList.add(callRecord);
+                    } while (recordCursor.moveToNext());
+                    listCallRecordList.add(callRecordsList);
+                    recordCursor.close();
+                }
+            }
+        }
+
+    }
 
 }
diff --git a/src/com/transage/privatespace/fragment/FG_PrivatePeople.java b/src/com/transage/privatespace/fragment/FG_PrivatePeople.java
index 085437c..d36b27f 100755
--- a/src/com/transage/privatespace/fragment/FG_PrivatePeople.java
+++ b/src/com/transage/privatespace/fragment/FG_PrivatePeople.java
@@ -2,15 +2,11 @@ package com.transage.privatespace.fragment;
 
 import android.animation.ObjectAnimator;
 import android.annotation.TargetApi;
-import android.content.ContentResolver;
 import android.content.Intent;
-import android.database.Cursor;
 import android.os.Build;
 import android.os.Bundle;
-import android.provider.ContactsContract;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
-import android.util.Log;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -23,6 +19,8 @@ import com.transage.privatespace.R;
 import com.transage.privatespace.activity.AddPeople;
 import com.transage.privatespace.adapter.PeopleListViewAdapter;
 import com.transage.privatespace.bean.People;
+import com.transage.privatespace.database.DatabaseAdapter;
+import com.transage.privatespace.utils.PrivateSpaceUtils;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -37,11 +35,18 @@ public class FG_PrivatePeople extends Fragment implements AdapterView.OnItemClic
     private View view;
     private ImageButton floatActionButton;
     private boolean isShowCheckBox = false;
+    private DatabaseAdapter mDb;
     private ArrayList<People> listPrivatePeople = new ArrayList<People>();
     private PeopleListViewAdapter peopleListViewAdapter;
     public static HashMap<Integer, People> mapSelectedPeople = new HashMap<Integer, People>();
     public static ArrayList<People> listSelectedPeople = new ArrayList<People>();
 
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        mDb = new DatabaseAdapter(getContext());
+        super.onCreate(savedInstanceState);
+    }
+
     @Nullable
     @Override
     public View onCreateView(LayoutInflater inflater, @Nullable final ViewGroup container, @Nullable Bundle savedInstanceState) {
@@ -84,26 +89,26 @@ public class FG_PrivatePeople extends Fragment implements AdapterView.OnItemClic
         }
     };
 
-//	/**
-//	 * 初始化数据
-//	 */
-//	private void initData() {
-//		listPrivatePeople.clear();// 先清空,避免数据积累
-//		DBHelper dbHelper = new DBHelper(getActivity());
-//		db = dbHelper.getWritableDatabase();
-//		Cursor cursor = db.query("peoples", null, null, null, null, null, "name asc", null);
-//		if (cursor != null && cursor.moveToFirst()) { // 判断游标是否为空
-//			do {
-//				String name = cursor.getString(cursor.getColumnIndex("name"));
-//				String phoneNum = cursor.getString(cursor.getColumnIndex("phoneNum"));
-//				People people = new People();
-//				people.setName(name);
-//				people.setPhoneNum(phoneNum);
-//				listPrivatePeople.add(people);
-//			} while (cursor.moveToNext());
-//		}
-//		cursor.close();
-//	}
+//  /**
+//   * 初始化数据
+//   */
+//  private void initData() {
+//      listPrivatePeople.clear();// 先清空,避免数据积累
+//      DBHelper dbHelper = new DBHelper(getActivity());
+//      db = dbHelper.getWritableDatabase();
+//      Cursor cursor = db.query("peoples", null, null, null, null, null, "name asc", null);
+//      if (cursor != null && cursor.moveToFirst()) { // 判断游标是否为空
+//          do {
+//              String name = cursor.getString(cursor.getColumnIndex("name"));
+//              String phoneNum = cursor.getString(cursor.getColumnIndex("phoneNum"));
+//              People people = new People();
+//              people.setName(name);
+//              people.setPhoneNum(phoneNum);
+//              listPrivatePeople.add(people);
+//          } while (cursor.moveToNext());
+//      }
+//      cursor.close();
+//  }
 
     /**
      * 初始化数据（获取私密联系人：is_private_contacts = 1）
@@ -111,7 +116,8 @@ public class FG_PrivatePeople extends Fragment implements AdapterView.OnItemClic
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     private void initData() {
         listPrivatePeople.clear();// 先清空,避免数据积累
-        try {
+        listPrivatePeople.addAll(mDb.getContacts());
+        /*SSStry {
             String contactNumber = null;
             String contactName;
             int contactId;
@@ -144,7 +150,7 @@ public class FG_PrivatePeople extends Fragment implements AdapterView.OnItemClic
             }
         } catch (Exception e) {
             e.printStackTrace();
-        }
+        }*/
     }
 
 
@@ -165,7 +171,8 @@ public class FG_PrivatePeople extends Fragment implements AdapterView.OnItemClic
                         listSelectedPeople.add(next.getValue());
                     }
                     //将listSelectedPeople中的联系人解除私密
-                    AddPeople.setPrivateContacts(listSelectedPeople, 0, getActivity().getContentResolver());
+//                    AddPeople.setPrivateContacts(listSelectedPeople, 0, getActivity().getContentResolver());
+                    PrivateSpaceUtils.setPrivateContacts(listSelectedPeople, 0, getActivity());
                     isShowCheckBox = false;
                     // 给floatActionButton添加属性翻转动画
                     ObjectAnimator.ofFloat(floatActionButton, "rotationY", 0.0F, -180.0F).setDuration(500).start();
diff --git a/src/com/transage/privatespace/fragment/FG_PrivateSms.java b/src/com/transage/privatespace/fragment/FG_PrivateSms.java
index 674a0fc..811c431 100755
--- a/src/com/transage/privatespace/fragment/FG_PrivateSms.java
+++ b/src/com/transage/privatespace/fragment/FG_PrivateSms.java
@@ -3,7 +3,6 @@ package com.transage.privatespace.fragment;
 import android.Manifest;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.net.Uri;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
@@ -15,13 +14,11 @@ import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ListView;
-
 import com.transage.privatespace.R;
 import com.transage.privatespace.adapter.SmsListViewAdapter;
 import com.transage.privatespace.bean.People;
 import com.transage.privatespace.bean.Sms;
-import com.transage.privatespace.utils.DBHelper;
-
+import com.transage.privatespace.database.DatabaseAdapter;
 import java.sql.Date;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -78,44 +75,35 @@ public class FG_PrivateSms extends Fragment {
     public void initData() {
         // 1.先获取到所有私密联系人
         ArrayList<People> listPrivatePeople = new ArrayList<People>();
-        DBHelper dbHelper = new DBHelper(getActivity());
-        SQLiteDatabase db = dbHelper.getWritableDatabase();
-        Cursor cursor = db.query("peoples", null, null, null, null, null, "name asc", null);
-        if (cursor.moveToFirst()) { // 判断游标是否为空
-            do {
-                String name = cursor.getString(cursor.getColumnIndex("name"));
-                String phoneNum = cursor.getString(cursor.getColumnIndex("phoneNum"));
-                People people = new People();
-                people.setName(name);
-                people.setPhoneNum(phoneNum);
-                listPrivatePeople.add(people);
-            } while (cursor.moveToNext());
-        }
-        cursor.close();
+        listPrivatePeople.addAll(new DatabaseAdapter(getContext()).getContacts());
+
         // 2.获取私密联系人的短信记录
         SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM-dd HH:mm", Locale.getDefault());
         String[] projection = new String[]{"_id", "address", "person", "body", "date", "type"};
         for (int i = 0; i < listPrivatePeople.size(); i++) {
-            Cursor cursor2 = getActivity().getContentResolver().query(Uri.parse("content://sms/"), projection,
-                    "address=?", new String[]{listPrivatePeople.get(i).getPhoneNum()}, "date desc");
-            if (cursor2 != null && cursor2.moveToFirst()) {
-                ArrayList<Sms> listSms = new ArrayList<Sms>();
-                do {
-                    String address = cursor2.getString(cursor2.getColumnIndex("address"));// 手机号码
-                    String body = cursor2.getString(cursor2.getColumnIndex("body"));// 短信内容
-                    String date = simpleDateFormat.format(new Date(cursor2.getLong(cursor2.getColumnIndex("date"))));// 收发时间
-                    int type = cursor2.getInt(cursor2.getColumnIndex("type"));// 收发类型
-                    // 添加一条短息数据到listSms
-                    Sms sms = new Sms();
-                    sms.setAddress(address);
-                    sms.setPerson(listPrivatePeople.get(i).getName());
-                    sms.setBody(body);
-                    sms.setDate(date);
-                    sms.setType(type);
-                    listSms.add(sms);
-                } while (cursor2.moveToNext());
-                listSmslist.add(listSms);
-                cursor2.close();
+            String phone = listPrivatePeople.get(i).getPhoneNum();
+            if (phone != null){
+                Cursor cursor2 = getActivity().getContentResolver().query(Uri.parse("content://sms/"), projection,
+                        "address=?", new String[]{phone}, "date desc");
+                if (cursor2 != null && cursor2.moveToFirst()) {
+                    ArrayList<Sms> listSms = new ArrayList<Sms>();
+                    do {
+                        String address = cursor2.getString(cursor2.getColumnIndex("address"));// 手机号码
+                        String body = cursor2.getString(cursor2.getColumnIndex("body"));// 短信内容
+                        String date = simpleDateFormat.format(new Date(cursor2.getLong(cursor2.getColumnIndex("date"))));// 收发时间
+                        int type = cursor2.getInt(cursor2.getColumnIndex("type"));// 收发类型
+                        // 添加一条短息数据到listSms
+                        Sms sms = new Sms();
+                        sms.setAddress(address);
+                        sms.setPerson(listPrivatePeople.get(i).getName());
+                        sms.setBody(body);
+                        sms.setDate(date);
+                        sms.setType(type);
+                        listSms.add(sms);
+                    } while (cursor2.moveToNext());
+                    listSmslist.add(listSms);
+                    cursor2.close();
+                }
             }
         }
     }
diff --git a/src/com/transage/privatespace/utils/PrivateSpaceUtils.java b/src/com/transage/privatespace/utils/PrivateSpaceUtils.java
new file mode 100755
index 0000000..93c22ab
--- /dev/null
+++ b/src/com/transage/privatespace/utils/PrivateSpaceUtils.java
@@ -0,0 +1,103 @@
+package com.transage.privatespace.utils;
+
+import android.app.Activity;
+import android.content.ContentProviderOperation;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.net.Uri;
+import android.provider.ContactsContract;
+
+import com.transage.privatespace.bean.People;
+import com.transage.privatespace.database.DatabaseAdapter;
+
+import java.util.ArrayList;
+
+/**
+ * Created by yanjie.xu on 2017/7/6.
+ */
+
+public class PrivateSpaceUtils {
+
+    /**
+     * 设置私密联系人
+     *
+     * @param list_selectedPeople ：待加密/解密的联系人列表
+     * @param isPrivate           ：1表示加为私密 ，0表示解除私密
+     * @param activity            ：内容解析者
+     */
+    public static void setPrivateContacts(ArrayList<People> list_selectedPeople, int isPrivate, Activity activity) {
+        for (People people : list_selectedPeople) {
+            if (isPrivate == 0) {
+                addContacts2Db(activity, people);
+                //删除私密联系人
+                new DatabaseAdapter(activity).deleteContactsById(people.getId());
+            }
+
+            if (isPrivate == 1) {
+                //添加联系人到私密
+                new DatabaseAdapter(activity).addContact(people);
+                //删除联系人元数据
+                activity.getContentResolver().delete(ContactsContract.RawContacts.CONTENT_URI,
+                        ContactsContract.Data._ID + "=?",
+                        new String[]{String.valueOf(people.getRawContactId())});
+            }
+        }
+
+    }
+
+    /**
+     * 添加联系人
+     * 在同一个事务中完成联系人各项数据的添加
+     * 使用ArrayList<ContentProviderOperation>，把每步操作放在它的对象中执行
+     * */
+    private static void addContacts2Db(Context context, People people){
+        Uri uri = Uri.parse("content://com.android.contacts/raw_contacts");
+        ContentResolver resolver = context.getContentResolver();
+        // 第一个参数：内容提供者的主机名
+        // 第二个参数：要执行的操作
+        ArrayList<ContentProviderOperation> operations = new ArrayList<ContentProviderOperation>();
+
+        // 操作1.添加Google账号，这里值为null，表示不添加
+        ContentProviderOperation operation = ContentProviderOperation.newInsert(uri)
+                .withValue("account_name", null)// account_name:Google账号
+                .build();
+
+        // 操作2.添加data表中name字段
+        uri = Uri.parse("content://com.android.contacts/data");
+        ContentProviderOperation operation2 = ContentProviderOperation.newInsert(uri)
+                // 第二个参数int previousResult:表示上一个操作的位于operations的第0个索引，
+                // 所以能够将上一个操作返回的raw_contact_id作为该方法的参数
+                .withValueBackReference("raw_contact_id", 0)
+                .withValue("mimetype", "vnd.android.cursor.item/name")
+                .withValue("data2", people.getName())
+                .build();
+
+        // 操作3.添加data表中phone字段
+        uri = Uri.parse("content://com.android.contacts/data");
+        ContentProviderOperation operation3 = ContentProviderOperation.newInsert(uri)
+                .withValueBackReference("raw_contact_id", 0)
+                .withValue("mimetype", "vnd.android.cursor.item/phone_v2")
+                .withValue("data2", "2")
+                .withValue("data1", people.getPhoneNum())
+                .build();
+
+        // 操作4.添加data表中的Email字段
+//        uri = Uri.parse("content://com.android.contacts/data");
+//        ContentProviderOperation operation4 = ContentProviderOperation
+//                .newInsert(uri).withValueBackReference("raw_contact_id", 0)
+//                .withValue("mimetype", "vnd.android.cursor.item/email_v2")
+//                .withValue("data2", "2")
+//                .withValue("data1", "zhouguoping@qq.com").build();
+
+        operations.add(operation);
+        operations.add(operation2);
+        operations.add(operation3);
+//        operations.add(operation4);
+
+        try {
+            resolver.applyBatch("com.android.contacts", operations);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+}
