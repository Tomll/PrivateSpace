diff --git a/src/com/transage/privatespace/bean/ContactInfo.java b/src/com/transage/privatespace/bean/ContactInfo.java
index 85d2adc..be4c234 100755
--- a/src/com/transage/privatespace/bean/ContactInfo.java
+++ b/src/com/transage/privatespace/bean/ContactInfo.java
@@ -1,6 +1,7 @@
 package com.transage.privatespace.bean;
 
 import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
@@ -25,6 +26,8 @@ import android.app.Activity;
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.database.Cursor;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.net.Uri;
 import android.os.Environment;
 import android.provider.ContactsContract;
@@ -39,352 +42,156 @@ import android.widget.Toast;
 /**
  * 联系人信息包装类
  * <p>
- * Created by yanjie.xu on 2017/7/19.
+ * Created by yanjie.xu on 2017/8/24.
  */
 public class ContactInfo {
     private static final String TAG = "ContactInfo";
-    /**
-     * MUST exist
-     */
-    private String name; // 姓名
-
-    /**
-     * 联系人电话信息
-     */
-    public static class PhoneInfo {
-        /**
-         * 联系电话类型
-         */
-        public int type;
-        /**
-         * 联系电话
-         */
-        public String number;
+    private int contactId;
+    private int hasPhoneNumber;
+    private int photoFileId;
+    private String displayName;
+    private byte[] photoData;
+    private Bitmap photo;
+    private List<RawContactInfo> rawContactInfos = new ArrayList<>();
+
+    public static class RawContactInfo {
+        public int rawContactId;
+        public int contactId;
+        public String accountName;
+        public String accountType;
+        public List<DataInfo> dataInfos = new ArrayList<>();
+
+        @Override
+        public String toString() {
+            return "RawContactInfo{" +
+                    "rawContactId=" + rawContactId +
+                    ", contactId=" + contactId +
+                    ", accountName='" + accountName + '\'' +
+                    ", accountType='" + accountType + '\'' +
+                    ", dataInfos=" + dataInfos +
+                    '}';
+        }
     }
 
-    /**
-     * 联系人邮箱信息
-     */
-    public static class EmailInfo {
-        /**
-         * 邮箱类型
-         */
-        public int type;
-        /**
-         * 邮箱
-         */
-        public String email;
+    public static class DataInfo {
+        public String mimeType;
+        public String type;
+        public String typeName;
+        public int rawContactId;
+        public String data1;
+        public String data2;
+        public String data3;
+        public String data4;
+        public String data5;
+        public String data6;
+        public String data7;
+        public String data8;
+        public String data9;
+        public String data10;
+        public String data11;
+        public String data12;
+        public String data13;
+        public String data14;
+        public String data15;
+
+        @Override
+        public String toString() {
+            return "DataInfo{" +
+                    "mimeType='" + mimeType + '\'' +
+                    ", type='" + type + '\'' +
+                    ", typeName='" + typeName + '\'' +
+                    ", rawContactId=" + rawContactId +
+                    ", data1='" + data1 + '\'' +
+                    ", data2='" + data2 + '\'' +
+                    ", data3='" + data3 + '\'' +
+                    ", data4='" + data4 + '\'' +
+                    ", data5='" + data5 + '\'' +
+                    ", data6='" + data6 + '\'' +
+                    ", data7='" + data7 + '\'' +
+                    ", data8='" + data8 + '\'' +
+                    ", data9='" + data9 + '\'' +
+                    ", data10='" + data10 + '\'' +
+                    ", data11='" + data11 + '\'' +
+                    ", data12='" + data12 + '\'' +
+                    ", data13='" + data13 + '\'' +
+                    ", data14='" + data14 + '\'' +
+                    ", data15='" + data15 + '\'' +
+                    '}';
+        }
     }
 
-    private List<PhoneInfo> phoneList = new ArrayList<PhoneInfo>(); // 联系号码
-
-    private List<EmailInfo> email = new ArrayList<EmailInfo>(); // Email
-
-    /**
-     * 构造联系人信息
-     *
-     * @param name 联系人姓名
-     */
-    public ContactInfo(String name) {
-        this.name = name;
+    public List<RawContactInfo> getRawContactInfos() {
+        return rawContactInfos;
     }
 
-    /**
-     * 姓名
-     */
-    public String getName() {
-        return name;
+    public void setRawContactInfos(List<RawContactInfo> rawContactInfos) {
+        this.rawContactInfos = rawContactInfos;
     }
 
-    /**
-     * 姓名
-     */
-    public ContactInfo setName(String name) {
-        this.name = name;
-        return this;
+    public int getContactId() {
+        return contactId;
     }
 
-    /**
-     * 联系电话信息
-     */
-    public List<PhoneInfo> getPhoneList() {
-        return phoneList;
+    public void setContactId(int contactId) {
+        this.contactId = contactId;
     }
 
-    /**
-     * 联系电话信息
-     */
-    public ContactInfo setPhoneList(List<PhoneInfo> phoneList) {
-        this.phoneList = phoneList;
-        return this;
+    public int getHasPhoneNumber() {
+        return hasPhoneNumber;
     }
 
-    /**
-     * 邮箱信息
-     */
-    public List<EmailInfo> getEmail() {
-        return email;
+    public void setHasPhoneNumber(int hasPhoneNumber) {
+        this.hasPhoneNumber = hasPhoneNumber;
     }
 
-    /**
-     * 邮箱信息
-     */
-    public ContactInfo setEmail(List<EmailInfo> email) {
-        this.email = email;
-        return this;
+    public int getPhotoFileId() {
+        return photoFileId;
     }
 
-    @Override
-    public String toString() {
-        return "{name: " + name + ", number: " + phoneList + ", email: " + email + "}";
+    public void setPhotoFileId(int photoFileId) {
+        this.photoFileId = photoFileId;
     }
 
+    public String getDisplayName() {
+        return displayName;
+    }
 
-    /**
-     * 联系人
-     * 备份/还原操作
-     *
-     * @author LW
-     */
-    public static class ContactHandler {
-        private static ContactHandler instance_ = new ContactHandler();
-
-        /**
-         * 获取实例
-         */
-        public static ContactHandler getInstance() {
-            return instance_;
-        }
-
-        /**
-         * 获取联系人指定信息
-         *
-         * @param projection 指定要获取的列数组, 获取全部列则设置为null
-         * @return
-         * @throws Exception
-         */
-
-        public Cursor queryContact(Activity context, String[] projection) {
-            // 获取联系人的所需信息
-            Cursor cur = context.getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, projection, null, null, null);
-            return cur;
-        }
-
-
-        /**
-         * 获取联系人信息
-         *
-         * @param context
-         * @return
-         */
-        public List<ContactInfo> getContactInfo(Activity context) {
-            List<ContactInfo> infoList = new ArrayList<ContactInfo>();
-            Cursor cur = queryContact(context, null);
-            if (cur.moveToFirst()) {
-                do {
-                    // 获取联系人id号
-                    String id = cur.getString(cur.getColumnIndex(ContactsContract.Contacts._ID));
-                    // 获取联系人姓名
-                    String displayName = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
-                    ContactInfo info = new ContactInfo(displayName);// 初始化联系人信息
-                    // 查看联系人有多少电话号码, 如果没有返回0
-                    int phoneCount = cur.getInt(cur.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER));
-
-//                    ContentValues values = new ContentValues();
-//                    values.put(ContactsContract.Contacts.IS_PRIVATE_CONTACTS, 0);
-//                    context.getContentResolver().update(ContactsContract.Contacts.CONTENT_URI, values, ContactsContract.Contacts.NAME_RAW_CONTACT_ID + "= ?", null);
-                    Log.i(TAG, "getContactInfo()->info = " + info.toString());
-
-                    if (phoneCount > 0) {
-                        Cursor phonesCursor = context.getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, ContactsContract.CommonDataKinds.Phone.CONTACT_ID + "=?" , new String[]{id}, null);
-                        Log.i(TAG, "getContactInfo()->info = " + info.toString());
-                        if (phonesCursor.moveToFirst()) {
-                            List<ContactInfo.PhoneInfo> phoneNumberList = new ArrayList<ContactInfo.PhoneInfo>();
-                            do {
-                                // 遍历所有电话号码
-                                String phoneNumber = phonesCursor.getString(phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
-                                // 对应的联系人类型
-                                int type = phonesCursor.getInt(phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE));
-                                // 初始化联系人电话信息
-                                ContactInfo.PhoneInfo phoneInfo = new ContactInfo.PhoneInfo();
-                                phoneInfo.type = type;
-                                phoneInfo.number = phoneNumber;
-                                phoneNumberList.add(phoneInfo);
-                            } while (phonesCursor.moveToNext());
-                            // 设置联系人电话信息
-                            info.setPhoneList(phoneNumberList);
-                        }
-                    }
-
-                    // 获得联系人的EMAIL
-                    Cursor emailCur = context.getContentResolver().query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,
-                            null, ContactsContract.CommonDataKinds.Email.CONTACT_ID + "=" + id, null, null);
-                    if (emailCur.moveToFirst()) {
-                        List<ContactInfo.EmailInfo> emailList = new ArrayList<ContactInfo.EmailInfo>();
-                        do {
-                            // 遍历所有的email
-                            String email = emailCur.getString(emailCur.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA1));
-                            int type = emailCur.getInt(emailCur.getColumnIndex(ContactsContract.CommonDataKinds.Email.TYPE));
-                            // 初始化联系人邮箱信息
-                            ContactInfo.EmailInfo emailInfo = new ContactInfo.EmailInfo();
-                            emailInfo.type = type;    // 设置邮箱类型
-                            emailInfo.email = email;    // 设置邮箱地址
-                            emailList.add(emailInfo);
-                        } while (emailCur.moveToNext());
-                        info.setEmail(emailList);
-                    }
+    public void setDisplayName(String displayName) {
+        this.displayName = displayName;
+    }
 
-                    //Cursor postalCursor = getContentResolver().query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI, null, ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + "=" + id, null, null);
-                    Log.i(TAG, "getContactInfo()->info = " + info.toString());
-                    infoList.add(info);
+    public byte[] getPhotoData() {
+        return photoData;
+    }
 
-                } while (cur.moveToNext());
-            }
-            return infoList;
-        }
+    public void setPhotoData(byte[] photoData) {
+        this.photoData = photoData;
+    }
 
-        /**
-         * 备份联系人
-         */
-        public void backupContacts(Activity context, List<ContactInfo> infos) {
+    public void addRawContact(RawContactInfo info){
+        rawContactInfos.add(info);
+    }
 
-            try {
-                String path = Environment.getExternalStorageDirectory() + "/contacts.vcf";
-                Log.i(TAG, "backupContacts()->file = " + path);
-                OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(path), "UTF-8");
-                VCardComposer composer = new VCardComposer();
-                for (ContactInfo info : infos) {
-                    ContactStruct contact = new ContactStruct();
-                    contact.name = info.getName();
-                    // 获取联系人电话信息, 添加至 ContactStruct
-                    List<ContactInfo.PhoneInfo> numberList = info
-                            .getPhoneList();
-                    for (ContactInfo.PhoneInfo phoneInfo : numberList) {
-                        contact.addPhone(phoneInfo.type, phoneInfo.number, null, true);
-                    }
-                    // 获取联系人Email信息, 添加至 ContactStruct
-                    List<ContactInfo.EmailInfo> emailList = info.getEmail();
-                    for (ContactInfo.EmailInfo emailInfo : emailList) {
-                        contact.addContactmethod(Contacts.KIND_EMAIL, emailInfo.type, emailInfo.email, null, true);
-                    }
-                    String vcardString = composer.createVCard(contact, VCardComposer.VERSION_VCARD30_INT);
-                    writer.write(vcardString);
-                    writer.write("\n");
-                    writer.flush();
-                }
-                writer.close();
-            } catch (UnsupportedEncodingException e) {
-                e.printStackTrace();
-            } catch (FileNotFoundException e) {
-                e.printStackTrace();
-            } catch (VCardException e) {
-                e.printStackTrace();
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-            Toast.makeText(context, "备份成功！", Toast.LENGTH_SHORT).show();
+    public Bitmap getPhoto(){
+        if (photo!=null){
+            return photo;
         }
 
-        /**
-         * 获取vCard文件中的联系人信息
-         *
-         * @return
-         */
-        public List<ContactInfo> restoreContacts() throws Exception {
-            List<ContactInfo> contactInfoList = new ArrayList<ContactInfo>();
-
-            VCardParser parse = new VCardParser();
-            VDataBuilder builder = new VDataBuilder();
-            String file = Environment.getExternalStorageDirectory() + "/contacts.vcf";
-            Log.i(TAG, "restoreContacts()->file = " + file);
-            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
-            String vcardString = "";
-            String line;
-            while ((line = reader.readLine()) != null) {
-                vcardString += line + "\n";
-            }
-            reader.close();
-            Log.i(TAG, "restoreContacts()->vcardString = " + vcardString);
-            boolean parsed = parse.parse(vcardString, "UTF-8", builder);
-            if (!parsed) {
-                throw new VCardException("Could not parse vCard file: " + file);
-            }
-            List<VNode> pimContacts = builder.vNodeList;
-            for (VNode contact : pimContacts) {
-                ContactStruct contactStruct = ContactStruct.constructContactFromVNode(contact, 1);
-                // 获取备份文件中的联系人电话信息
-                List<PhoneData> phoneDataList = contactStruct.phoneList;
-                List<ContactInfo.PhoneInfo> phoneInfoList = new ArrayList<ContactInfo.PhoneInfo>();
-                for (PhoneData phoneData : phoneDataList) {
-                    ContactInfo.PhoneInfo phoneInfo = new ContactInfo.PhoneInfo();
-                    phoneInfo.number = phoneData.data;
-                    phoneInfo.type = phoneData.type;
-                    phoneInfoList.add(phoneInfo);
-                }
-                // 获取备份文件中的联系人邮箱信息
-                List<ContactMethod> emailList = contactStruct.contactmethodList;
-                List<ContactInfo.EmailInfo> emailInfoList = new ArrayList<ContactInfo.EmailInfo>();
-                // 存在 Email 信息
-                if (null != emailList) {
-                    for (ContactMethod contactMethod : emailList) {
-                        if (Contacts.KIND_EMAIL == contactMethod.kind) {
-                            ContactInfo.EmailInfo emailInfo = new ContactInfo.EmailInfo();
-                            emailInfo.email = contactMethod.data;
-                            emailInfo.type = contactMethod.type;
-                            emailInfoList.add(emailInfo);
-                        }
-                    }
-                }
-                ContactInfo info = new ContactInfo(contactStruct.name).setPhoneList(phoneInfoList).setEmail(emailInfoList);
-                contactInfoList.add(info);
-            }
-            return contactInfoList;
+        if(photoData == null) {
+            return null;
         }
 
-        /**
-         * 向手机中录入联系人信息
-         *
-         * @param info 要录入的联系人信息
-         */
-        public void addContacts(Activity context, ContactInfo info) {
-            ContentValues values = new ContentValues();
-            //首先向RawContacts.CONTENT_URI执行一个空值插入，目的是获取系统返回的rawContactId
-            Uri rawContactUri = context.getContentResolver().insert(RawContacts.CONTENT_URI, values);
-            long rawContactId = ContentUris.parseId(rawContactUri);
-            //往data表入姓名数据
-            values.clear();
-            values.put(Data.RAW_CONTACT_ID, rawContactId);
-            values.put(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE);
-            values.put(StructuredName.GIVEN_NAME, info.getName());
-            context.getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, values);
-            // 获取联系人电话信息
-            List<ContactInfo.PhoneInfo> phoneList = info.getPhoneList();
-            /** 录入联系电话 */
-            for (ContactInfo.PhoneInfo phoneInfo : phoneList) {
-                values.clear();
-                values.put(android.provider.ContactsContract.Contacts.Data.RAW_CONTACT_ID, rawContactId);
-                values.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);
-                // 设置录入联系人电话信息
-                values.put(Phone.NUMBER, phoneInfo.number);
-                values.put(Phone.TYPE, phoneInfo.type);
-                // 往data表入电话数据
-                context.getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, values);
-
-            }
-            // 获取联系人邮箱信息
-            List<ContactInfo.EmailInfo> emailList = info.getEmail();
-            /** 录入联系人邮箱信息 */
-            for (ContactInfo.EmailInfo email : emailList) {
-                values.clear();
-                values.put(android.provider.ContactsContract.Contacts.Data.RAW_CONTACT_ID, rawContactId);
-                values.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
-                // 设置录入的邮箱信息
-                values.put(Email.DATA, email.email);
-                values.put(Email.TYPE, email.type);
-                // 往data表入Email数据
-                context.getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, values);
+        ByteArrayInputStream var6 = new ByteArrayInputStream(photoData);
+        photo = BitmapFactory.decodeStream(var6);
+        return photo;
+    }
 
-            }
-        }
+    @Override
+    public String toString() {
+        return "ContactInfo{" +
+                "contactId=" + contactId +
+                ", hasPhoneNumber=" + hasPhoneNumber +
+                ", displayName='" + displayName + '\'' +
+                '}';
     }
 }
diff --git a/src/com/transage/privatespace/bean/ContactInfoBack.java b/src/com/transage/privatespace/bean/ContactInfoBack.java
new file mode 100755
index 0000000..2c21940
--- /dev/null
+++ b/src/com/transage/privatespace/bean/ContactInfoBack.java
@@ -0,0 +1,391 @@
+package com.transage.privatespace.bean;
+
+import java.io.BufferedReader;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
+import java.util.List;
+
+import com.transage.privatespace.vcard.provider.Contacts;
+import com.transage.privatespace.vcard.pim.VDataBuilder;
+import com.transage.privatespace.vcard.pim.VNode;
+import com.transage.privatespace.vcard.pim.vcard.ContactStruct;
+import com.transage.privatespace.vcard.pim.vcard.ContactStruct.ContactMethod;
+import com.transage.privatespace.vcard.pim.vcard.ContactStruct.PhoneData;
+import com.transage.privatespace.vcard.pim.vcard.VCardComposer;
+import com.transage.privatespace.vcard.pim.vcard.VCardException;
+import com.transage.privatespace.vcard.pim.vcard.VCardParser;
+
+import android.app.Activity;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.Environment;
+import android.provider.ContactsContract;
+import android.provider.ContactsContract.CommonDataKinds.Email;
+import android.provider.ContactsContract.CommonDataKinds.Phone;
+import android.provider.ContactsContract.CommonDataKinds.StructuredName;
+import android.provider.ContactsContract.RawContacts;
+import android.provider.ContactsContract.RawContacts.Data;
+import android.util.Log;
+import android.widget.Toast;
+
+/**
+ * 联系人信息包装类
+ * <p>
+ * Created by yanjie.xu on 2017/7/19.
+ */
+public class ContactInfoBack {
+    private static final String TAG = "ContactInfoBack";
+    /**
+     * MUST exist
+     */
+    private String name; // 姓名
+
+    /**
+     * 联系人电话信息
+     */
+    public static class PhoneInfo {
+        /**
+         * 联系电话类型
+         */
+        public int type;
+        /**
+         * 联系电话
+         */
+        public String number;
+    }
+
+    /**
+     * 联系人邮箱信息
+     */
+    public static class EmailInfo {
+        /**
+         * 邮箱类型
+         */
+        public int type;
+        /**
+         * 邮箱
+         */
+        public String email;
+    }
+
+    private List<PhoneInfo> phoneList = new ArrayList<PhoneInfo>(); // 联系号码
+
+    private List<EmailInfo> email = new ArrayList<EmailInfo>(); // Email
+
+    /**
+     * 构造联系人信息
+     *
+     * @param name 联系人姓名
+     */
+    public ContactInfoBack(String name) {
+        this.name = name;
+    }
+
+    /**
+     * 姓名
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * 姓名
+     */
+    public ContactInfoBack setName(String name) {
+        this.name = name;
+        return this;
+    }
+
+    /**
+     * 联系电话信息
+     */
+    public List<PhoneInfo> getPhoneList() {
+        return phoneList;
+    }
+
+    /**
+     * 联系电话信息
+     */
+    public ContactInfoBack setPhoneList(List<PhoneInfo> phoneList) {
+        this.phoneList = phoneList;
+        return this;
+    }
+
+    /**
+     * 邮箱信息
+     */
+    public List<EmailInfo> getEmail() {
+        return email;
+    }
+
+    /**
+     * 邮箱信息
+     */
+    public ContactInfoBack setEmail(List<EmailInfo> email) {
+        this.email = email;
+        return this;
+    }
+
+    @Override
+    public String toString() {
+        return "{name: " + name + ", number: " + phoneList + ", email: " + email + "}";
+    }
+
+
+    /**
+     * 联系人
+     * 备份/还原操作
+     *
+     * @author LW
+     */
+    public static class ContactHandler {
+        private static ContactHandler instance_ = new ContactHandler();
+
+        /**
+         * 获取实例
+         */
+        public static ContactHandler getInstance() {
+            return instance_;
+        }
+
+        /**
+         * 获取联系人指定信息
+         *
+         * @param projection 指定要获取的列数组, 获取全部列则设置为null
+         * @return
+         * @throws Exception
+         */
+
+        public Cursor queryContact(Activity context, String[] projection) {
+            // 获取联系人的所需信息
+            Cursor cur = context.getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, projection, null, null, null);
+            return cur;
+        }
+
+
+        /**
+         * 获取联系人信息
+         *
+         * @param context
+         * @return
+         */
+        public List<ContactInfoBack> getContactInfoBack(Activity context) {
+            List<ContactInfoBack> infoList = new ArrayList<ContactInfoBack>();
+            Cursor cur = queryContact(context, null);
+            if (cur.moveToFirst()) {
+                do {
+                    // 获取联系人id号
+                    String id = cur.getString(cur.getColumnIndex(ContactsContract.Contacts._ID));
+                    // 获取联系人姓名
+                    String displayName = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
+                    ContactInfoBack info = new ContactInfoBack(displayName);// 初始化联系人信息
+                    // 查看联系人有多少电话号码, 如果没有返回0
+                    int phoneCount = cur.getInt(cur.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER));
+
+//                    ContentValues values = new ContentValues();
+//                    values.put(ContactsContract.Contacts.IS_PRIVATE_CONTACTS, 0);
+//                    context.getContentResolver().update(ContactsContract.Contacts.CONTENT_URI, values, ContactsContract.Contacts.NAME_RAW_CONTACT_ID + "= ?", null);
+                    Log.i(TAG, "getContactInfoBack()->info = " + info.toString());
+
+                    if (phoneCount > 0) {
+                        Cursor phonesCursor = context.getContentResolver().query(Phone.CONTENT_URI, null, Phone.CONTACT_ID + "=?", new String[]{id}, null);
+                        Log.i(TAG, "getContactInfoBack()->info = " + info.toString());
+                        if (phonesCursor.moveToFirst()) {
+                            List<PhoneInfo> phoneNumberList = new ArrayList<PhoneInfo>();
+                            do {
+                                // 遍历所有电话号码
+                                String phoneNumber = phonesCursor.getString(phonesCursor.getColumnIndex(Phone.NUMBER));
+                                // 对应的联系人类型
+                                int type = phonesCursor.getInt(phonesCursor.getColumnIndex(Phone.TYPE));
+                                // 初始化联系人电话信息
+                                PhoneInfo phoneInfo = new PhoneInfo();
+                                phoneInfo.type = type;
+                                phoneInfo.number = phoneNumber;
+                                phoneNumberList.add(phoneInfo);
+                            } while (phonesCursor.moveToNext());
+                            // 设置联系人电话信息
+                            info.setPhoneList(phoneNumberList);
+                        }
+                    }
+
+                    // 获得联系人的EMAIL
+                    Cursor emailCur = context.getContentResolver().query(Email.CONTENT_URI,
+                            null, Email.CONTACT_ID + "=" + id, null, null);
+                    if (emailCur.moveToFirst()) {
+                        List<EmailInfo> emailList = new ArrayList<EmailInfo>();
+                        do {
+                            // 遍历所有的email
+                            String email = emailCur.getString(emailCur.getColumnIndex(Email.DATA1));
+                            int type = emailCur.getInt(emailCur.getColumnIndex(Email.TYPE));
+                            // 初始化联系人邮箱信息
+                            EmailInfo emailInfo = new EmailInfo();
+                            emailInfo.type = type;    // 设置邮箱类型
+                            emailInfo.email = email;    // 设置邮箱地址
+                            emailList.add(emailInfo);
+                        } while (emailCur.moveToNext());
+                        info.setEmail(emailList);
+                    }
+
+                    //Cursor postalCursor = getContentResolver().query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI, null, ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + "=" + id, null, null);
+                    Log.i(TAG, "getContactInfoBack()->info = " + info.toString());
+                    infoList.add(info);
+
+                } while (cur.moveToNext());
+            }
+            return infoList;
+        }
+
+        /**
+         * 备份联系人
+         */
+        public void backupContacts(Activity context, List<ContactInfoBack> infos) {
+
+            try {
+                String path = Environment.getExternalStorageDirectory() + "/contacts.vcf";
+                Log.i(TAG, "backupContacts()->file = " + path);
+                OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(path), "UTF-8");
+                VCardComposer composer = new VCardComposer();
+                for (ContactInfoBack info : infos) {
+                    ContactStruct contact = new ContactStruct();
+                    contact.name = info.getName();
+                    // 获取联系人电话信息, 添加至 ContactStruct
+                    List<PhoneInfo> numberList = info
+                            .getPhoneList();
+                    for (PhoneInfo phoneInfo : numberList) {
+                        contact.addPhone(phoneInfo.type, phoneInfo.number, null, true);
+                    }
+                    // 获取联系人Email信息, 添加至 ContactStruct
+                    List<EmailInfo> emailList = info.getEmail();
+                    for (EmailInfo emailInfo : emailList) {
+                        contact.addContactmethod(Contacts.KIND_EMAIL, emailInfo.type, emailInfo.email, null, true);
+                    }
+                    String vcardString = composer.createVCard(contact, VCardComposer.VERSION_VCARD30_INT);
+                    writer.write(vcardString);
+                    writer.write("\n");
+                    writer.flush();
+                }
+                writer.close();
+            } catch (UnsupportedEncodingException e) {
+                e.printStackTrace();
+            } catch (FileNotFoundException e) {
+                e.printStackTrace();
+            } catch (VCardException e) {
+                e.printStackTrace();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+            Toast.makeText(context, "备份成功！", Toast.LENGTH_SHORT).show();
+        }
+
+        /**
+         * 获取vCard文件中的联系人信息
+         *
+         * @return
+         */
+        public List<ContactInfoBack> restoreContacts() throws Exception {
+            List<ContactInfoBack> ContactInfoBackList = new ArrayList<ContactInfoBack>();
+
+            VCardParser parse = new VCardParser();
+            VDataBuilder builder = new VDataBuilder();
+            String file = Environment.getExternalStorageDirectory() + "/contacts.vcf";
+            Log.i(TAG, "restoreContacts()->file = " + file);
+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
+            String vcardString = "";
+            String line;
+            while ((line = reader.readLine()) != null) {
+                vcardString += line + "\n";
+            }
+            reader.close();
+            Log.i(TAG, "restoreContacts()->vcardString = " + vcardString);
+            boolean parsed = parse.parse(vcardString, "UTF-8", builder);
+            if (!parsed) {
+                throw new VCardException("Could not parse vCard file: " + file);
+            }
+            List<VNode> pimContacts = builder.vNodeList;
+            for (VNode contact : pimContacts) {
+                ContactStruct contactStruct = ContactStruct.constructContactFromVNode(contact, 1);
+                // 获取备份文件中的联系人电话信息
+                List<PhoneData> phoneDataList = contactStruct.phoneList;
+                List<PhoneInfo> phoneInfoList = new ArrayList<PhoneInfo>();
+                for (PhoneData phoneData : phoneDataList) {
+                    PhoneInfo phoneInfo = new PhoneInfo();
+                    phoneInfo.number = phoneData.data;
+                    phoneInfo.type = phoneData.type;
+                    phoneInfoList.add(phoneInfo);
+                }
+                // 获取备份文件中的联系人邮箱信息
+                List<ContactMethod> emailList = contactStruct.contactmethodList;
+                List<EmailInfo> emailInfoList = new ArrayList<EmailInfo>();
+                // 存在 Email 信息
+                if (null != emailList) {
+                    for (ContactMethod contactMethod : emailList) {
+                        if (Contacts.KIND_EMAIL == contactMethod.kind) {
+                            EmailInfo emailInfo = new EmailInfo();
+                            emailInfo.email = contactMethod.data;
+                            emailInfo.type = contactMethod.type;
+                            emailInfoList.add(emailInfo);
+                        }
+                    }
+                }
+                ContactInfoBack info = new ContactInfoBack(contactStruct.name).setPhoneList(phoneInfoList).setEmail(emailInfoList);
+                ContactInfoBackList.add(info);
+            }
+            return ContactInfoBackList;
+        }
+
+        /**
+         * 向手机中录入联系人信息
+         *
+         * @param info 要录入的联系人信息
+         */
+        public void addContacts(Activity context, ContactInfoBack info) {
+            ContentValues values = new ContentValues();
+            //首先向RawContacts.CONTENT_URI执行一个空值插入，目的是获取系统返回的rawContactId
+            Uri rawContactUri = context.getContentResolver().insert(RawContacts.CONTENT_URI, values);
+            long rawContactId = ContentUris.parseId(rawContactUri);
+            //往data表入姓名数据
+            values.clear();
+            values.put(Data.RAW_CONTACT_ID, rawContactId);
+            values.put(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE);
+            values.put(StructuredName.GIVEN_NAME, info.getName());
+            context.getContentResolver().insert(ContactsContract.Data.CONTENT_URI, values);
+            // 获取联系人电话信息
+            List<PhoneInfo> phoneList = info.getPhoneList();
+            /** 录入联系电话 */
+            for (PhoneInfo phoneInfo : phoneList) {
+                values.clear();
+                values.put(ContactsContract.Contacts.Data.RAW_CONTACT_ID, rawContactId);
+                values.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);
+                // 设置录入联系人电话信息
+                values.put(Phone.NUMBER, phoneInfo.number);
+                values.put(Phone.TYPE, phoneInfo.type);
+                // 往data表入电话数据
+                context.getContentResolver().insert(ContactsContract.Data.CONTENT_URI, values);
+
+            }
+            // 获取联系人邮箱信息
+            List<EmailInfo> emailList = info.getEmail();
+            /** 录入联系人邮箱信息 */
+            for (EmailInfo email : emailList) {
+                values.clear();
+                values.put(ContactsContract.Contacts.Data.RAW_CONTACT_ID, rawContactId);
+                values.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
+                // 设置录入的邮箱信息
+                values.put(Email.DATA, email.email);
+                values.put(Email.TYPE, email.type);
+                // 往data表入Email数据
+                context.getContentResolver().insert(ContactsContract.Data.CONTENT_URI, values);
+
+            }
+        }
+    }
+}
+
diff --git a/src/com/transage/privatespace/utils/ContactUtils.java b/src/com/transage/privatespace/utils/ContactUtils.java
new file mode 100755
index 0000000..a99b480
--- /dev/null
+++ b/src/com/transage/privatespace/utils/ContactUtils.java
@@ -0,0 +1,276 @@
+package com.transage.privatespace.utils;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.json.JSONException;
+
+import android.content.ContentUris;
+import android.content.Context;
+import android.database.Cursor;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.provider.ContactsContract;
+import android.provider.ContactsContract.CommonDataKinds.Email;
+import android.provider.ContactsContract.CommonDataKinds.Event;
+import android.provider.ContactsContract.CommonDataKinds.Im;
+import android.provider.ContactsContract.CommonDataKinds.Nickname;
+import android.provider.ContactsContract.CommonDataKinds.Note;
+import android.provider.ContactsContract.CommonDataKinds.Organization;
+import android.provider.ContactsContract.CommonDataKinds.Phone;
+import android.provider.ContactsContract.CommonDataKinds.StructuredName;
+import android.provider.ContactsContract.CommonDataKinds.StructuredPostal;
+import android.provider.ContactsContract.CommonDataKinds.Website;
+import android.provider.ContactsContract.CommonDataKinds.Photo;
+import android.provider.ContactsContract.Contacts;
+import android.provider.ContactsContract.Data;
+import android.util.Log;
+
+import com.transage.privatespace.bean.ContactInfo;
+import com.transage.privatespace.R;
+
+/**
+ * Created by yanjie.xu on 2017/8/24.
+ */
+
+public class ContactUtils {
+    public static final String TAG = "ContactUtil";
+    private static Context context;
+    private List<ContactInfo> mContactInfos = new ArrayList<>();
+
+    public ContactUtil(Context context) {
+        this.context = context;
+    }
+
+    // ContactsContract.Contacts.CONTENT_URI= content://com.android.contacts/contacts;
+    // ContactsContract.Data.CONTENT_URI = content://com.android.contacts/data;
+
+    public void getContacts() {
+        Cursor cur = context.getContentResolver().query(Contacts.CONTENT_URI, null, null, null, null);
+        if (cur.moveToFirst()) {
+            ContactInfo info = new ContactInfo();
+            do {
+                // 获取联系人id号
+                int id = cur.getInt(cur.getColumnIndex(Contacts._ID));
+                // 获取联系人姓名
+                String displayName = cur.getString(cur.getColumnIndex(Contacts.DISPLAY_NAME));
+//                ContactInfo info = new ContactInfo(displayName);// 初始化联系人信息
+                // 查看联系人有多少电话号码, 如果没有返回0
+                int phoneCount = cur.getInt(cur.getColumnIndex(Contacts.HAS_PHONE_NUMBER));
+                //得到联系人头像ID
+                Long photoid = cur.getLong(Contacts.PHOTO_ID);
+
+                //photoid 大于0 表示联系人有头像 如果没有给此人设置头像则给他一个默认的
+                if(photoid > 0 ) {
+                    Uri uri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,id);
+                    InputStream input = ContactsContract.Contacts.openContactPhotoInputStream(context.getContentResolver(), uri);
+//                    contactPhoto = BitmapFactory.decodeStream(input);
+                    info.setPhotoData(input2byte(input));
+                }else {
+//                    contactPhoto = BitmapFactory.decodeResource(getResources(), R.drawable.contact_photo);
+                }
+
+                info.setContactId(id);
+                info.setDisplayName(displayName);
+                info.setHasPhoneNumber(phoneCount);
+
+                getRawContact(id, info);
+
+                mContactInfos.add(info);
+            } while (cur.moveToNext());
+        }
+    }
+
+    public void getRawContact(int contactId, ContactInfo info) {
+        //获取联系人RawContacts数据
+        Cursor rawContactCursor = context.getContentResolver().query(ContactsContract.RawContacts.CONTENT_URI,
+                new String[]{ContactsContract.RawContacts._ID,
+                        ContactsContract.RawContacts.CONTACT_ID,
+                        ContactsContract.RawContacts.ACCOUNT_TYPE,
+                        ContactsContract.RawContacts.ACCOUNT_NAME},
+                ContactsContract.RawContacts.CONTACT_ID + "=?",
+                new String[]{String.valueOf(contactId)},
+                null);
+        Log.i(TAG, "rawContactCursor.getCount() = " + rawContactCursor.getCount() + "contactId = " + contactId);
+        if (rawContactCursor.moveToFirst()) {
+            do {
+                // 遍历所有电话号码
+                int _id = rawContactCursor.getInt(rawContactCursor.getColumnIndex(ContactsContract.RawContacts._ID));
+                int contact_id = rawContactCursor.getInt(rawContactCursor.getColumnIndex(ContactsContract.RawContacts.CONTACT_ID));
+                String account_type = rawContactCursor.getString(rawContactCursor.getColumnIndex(ContactsContract.RawContacts.ACCOUNT_TYPE));
+                String account_name = rawContactCursor.getString(rawContactCursor.getColumnIndex(ContactsContract.RawContacts.ACCOUNT_NAME));
+                ContactInfo.RawContactInfo rawContactInfo = new ContactInfo.RawContactInfo();
+                rawContactInfo.contactId = contact_id;
+                rawContactInfo.rawContactId = _id;
+                rawContactInfo.accountType = account_type;
+                rawContactInfo.accountName = account_name;
+                getContactData(_id, rawContactInfo);
+                Log.i(TAG, "rawContactInfo = " + rawContactInfo.toString());
+                info.addRawContact(rawContactInfo);
+            } while (rawContactCursor.moveToNext());
+            // 设置联系人电话信息
+        }
+    }
+
+    /**
+     * 获取联系人信息，并把数据转换成json数据
+     *
+     * @return
+     * @throws JSONException
+     */
+    public void getContactData(int rawContactId, ContactInfo.RawContactInfo info) {
+        String mimetype = "";
+        String type = "";
+        int oldrid = -1;
+        int contactId = -1;
+
+        String project1[] = new String[]{
+                "mimetype", "raw_contact_id", "data1", "data2", "data3", "data4", "data5", "data6", "data7",
+                "data8", "data9", "data10", "data11", "data12", "data13", "data14", "data15"
+        };
+
+        // 1.查询通讯录所有联系人信息，通过id排序，我们看下android联系人的表就知道，所有的联系人的数据是由RAW_CONTACT_ID来索引开的
+        // 所以，先获取所有的人的RAW_CONTACT_ID
+        Cursor cursor = context.getContentResolver().query(
+                Data.CONTENT_URI,
+                project1,
+                Data.RAW_CONTACT_ID + "=?",
+                new String[]{String.valueOf(rawContactId)},
+                Data.RAW_CONTACT_ID);
+        Log.i(TAG, "ContactUtil:cursor.getCount() = " + cursor.getCount());
+        int numm = 0;
+        while (cursor.moveToNext()) {
+            contactId = cursor.getInt(cursor
+                    .getColumnIndex(Data.RAW_CONTACT_ID));
+            if (oldrid != contactId) {
+                numm++;
+                oldrid = contactId;
+            }
+            ContactInfo.DataInfo dataInfo = new ContactInfo.DataInfo();
+            mimetype = cursor.getString(cursor.getColumnIndex(Data.MIMETYPE)); // 取得mimetype类型,扩展的数据都在这个类型里面
+            type = cursor.getString(cursor.getColumnIndex(Data.DATA2));
+            dataInfo.rawContactId = contactId
+            dataInfo.mimeType = mimetype;
+            dataInfo.type = type;
+            dataInfo.data2 = type;
+            // 1.1,拿到联系人的各种名字
+            if (StructuredName.CONTENT_ITEM_TYPE.equals(mimetype)) {
+                dataInfo.data1 = cursor.getString(cursor
+                        .getColumnIndex(StructuredName.DISPLAY_NAME));
+                dataInfo.data4 = cursor.getString(cursor
+                        .getColumnIndex(StructuredName.PREFIX));
+                dataInfo.data3 = cursor.getString(cursor
+                        .getColumnIndex(StructuredName.FAMILY_NAME));
+                dataInfo.data5 = cursor.getString(cursor
+                        .getColumnIndex(StructuredName.MIDDLE_NAME));
+                dataInfo.data2 = cursor.getString(cursor
+                        .getColumnIndex(StructuredName.GIVEN_NAME));
+                dataInfo.data6 = cursor.getString(cursor
+                        .getColumnIndex(StructuredName.SUFFIX));
+                dataInfo.data9 = cursor.getString(cursor
+                        .getColumnIndex(StructuredName.PHONETIC_FAMILY_NAME));
+                dataInfo.data8 = cursor.getString(cursor
+                        .getColumnIndex(StructuredName.PHONETIC_MIDDLE_NAME));
+                dataInfo.data7 = cursor.getString(cursor
+                        .getColumnIndex(StructuredName.PHONETIC_GIVEN_NAME));
+            }
+            // 1.2 获取各种电话信息
+            if (Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
+                dataInfo.data1 = cursor.getString(cursor.getColumnIndex(Phone.NUMBER));
+            }
+            //查找Email信息
+            if (Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
+                dataInfo.data1 = cursor.getString(cursor.getColumnIndex(Email.ADDRESS));
+            }
+            // 查找event地址
+            if (Event.CONTENT_ITEM_TYPE.equals(mimetype)) { // 取出时间类型
+                dataInfo.data1 = cursor.getString(cursor.getColumnIndex(Event.START_DATE));
+            }
+            // 获取即时通讯消息
+            if (Im.CONTENT_ITEM_TYPE.equals(mimetype)) { // 取出即时消息类型
+                dataInfo.data1 = cursor.getString(cursor.getColumnIndex(Im.DATA));
+            }
+            // 获取备注信息
+            if (Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
+                dataInfo.data1 = cursor.getString(cursor.getColumnIndex(Note.NOTE));
+            }
+            // 获取昵称信息
+            if (Nickname.CONTENT_ITEM_TYPE.equals(mimetype)) {
+                dataInfo.data1 = cursor.getString(cursor.getColumnIndex(Nickname.NAME));
+            }
+            // 获取组织信息
+            if (Organization.CONTENT_ITEM_TYPE.equals(mimetype)) { // 取出组织类型
+                dataInfo.data1 = cursor.getString(cursor
+                        .getColumnIndex(Organization.COMPANY));
+                dataInfo.data4 = cursor.getString(cursor
+                        .getColumnIndex(Organization.TITLE));
+                dataInfo.data5 = cursor.getString(cursor
+                        .getColumnIndex(Organization.DEPARTMENT));
+            }
+            // 获取网站信息
+            if (Website.CONTENT_ITEM_TYPE.equals(mimetype)) { // 取出组织类型
+                dataInfo.data1 = cursor.getString(cursor.getColumnIndex(Website.URL));
+            }
+            // 查找通讯地址
+            if (StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) { // 取出邮件类型
+                dataInfo.data4 = cursor.getString(cursor
+                        .getColumnIndex(StructuredPostal.STREET));
+                dataInfo.data7 = cursor.getString(cursor
+                        .getColumnIndex(StructuredPostal.CITY));
+                dataInfo.data5 = cursor.getString(cursor
+                        .getColumnIndex(StructuredPostal.POBOX));
+                dataInfo.data6 = cursor.getString(cursor
+                        .getColumnIndex(StructuredPostal.NEIGHBORHOOD));
+                dataInfo.data8 = cursor.getString(cursor
+                        .getColumnIndex(StructuredPostal.REGION));
+                dataInfo.data9 = cursor.getString(cursor
+                        .getColumnIndex(StructuredPostal.POSTCODE));
+                dataInfo.data10 = cursor.getString(cursor
+                        .getColumnIndex(StructuredPostal.COUNTRY));
+            }
+            if (Photo.CONTENT_ITEM_TYPE.equals(mimetype)){
+                dataInfo.data14 = cursor.getString(cursor.getColumnIndex(Photo.PHOTO_FILE_ID));
+                dataInfo.data15 = cursor.getString(cursor.getColumnIndex(Photo.PHOTO));
+            }
+            Log.i(TAG, "dataInfo = " + dataInfo.toString());
+            info.dataInfos.add(dataInfo);
+        }
+        cursor.close();
+//        Log.i(TAG, contactData.toString());
+    }
+
+    /**
+     * inputStream转换为byte数组
+     * @param inStream
+     * @return
+     */
+    public static final byte[] input2byte(InputStream inStream){
+        ByteArrayOutputStream swapStream = new ByteArrayOutputStream();
+        byte[] buff = new byte[512];
+        int rc = 0;
+        try {
+            while ((rc = inStream.read(buff, 0, 512)) > 0) {
+                swapStream.write(buff, 0, rc);
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        byte[] in2b = swapStream.toByteArray();
+        return in2b;
+    }
+
+    /**
+     * 根据type值获取标签字符串
+     *
+     * @param type
+     * @return
+     */
+    public static String getLabelNameByType(int type) {
+        //通过type获取typelabel字符串
+        int typeLabelResource = Phone.getTypeLabelResource(type);
+        return context.getResources().getString(typeLabelResource)
+    }
+}
